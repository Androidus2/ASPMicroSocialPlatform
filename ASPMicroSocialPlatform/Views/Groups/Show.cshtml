@model Group

<style>
    .message-actions {
        opacity: 0;
        transition: opacity 0.2s;
        background: none;
        border: none;
        padding: 0 4px;
    }

    .d-inline-block:hover .message-actions {
        opacity: 1;
    }

    .avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #e9ecef;
        color: #495057;
        font-weight: 500;
        margin: 0 8px;
    }
</style>

<div class="d-flex flex-column h-100 flex-grow-1 flex-shrink-1 w-100">
    <!-- Chat Header -->
    <div class="p-3 border-bottom bg-white">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <h5 class="mb-0">@Model.Name</h5>
                <span class="badge bg-secondary ms-2">
                    @Model.UserGroups.Count members
                </span>
            </div>
            <div class="dropdown">
                <button class="btn btn-light btn-sm" data-bs-toggle="dropdown">
                    <i class="bi bi-three-dots-vertical"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item text-danger" asp-action="Leave" asp-route-id="@Model.Id">
                            <i class="bi bi-box-arrow-in-up-left me-2"></i>Leave Group
                        </a>
                    </li>
                    @if (ViewBag.IsModerator || User.IsInRole("Admin"))
                    {
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li>
                            <a class="dropdown-item" asp-action="Edit" asp-route-id="@Model.Id">
                                <i class="bi bi-pencil me-2"></i>Edit Group
                            </a>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li>
                            <form asp-action="Delete" asp-route-id="@Model.Id"
                            onsubmit="return confirm('Are you sure you want to delete this group?');">
                                <button type="submit" class="dropdown-item text-danger">
                                    <i class="bi bi-trash me-2"></i>Delete Group
                                </button>
                            </form>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <!-- Chat Area -->
    <div class="flex-grow-1 bg-light p-3" style="overflow-y: auto;" id="messagesList">
        @foreach (var message in Model.Messages.OrderBy(m => m.Id))
        {
            <div class="mb-3 @(message.UserId == ViewBag.CurrentUserId ? "text-end" : "")" data-message-id="@message.Id">
                <div class="d-flex @(message.UserId == ViewBag.CurrentUserId ? "flex-row-reverse" : "flex-row") align-items-start">
                    <a href="@Url.Action("Show", "Users", new { id = message.UserId })" class="avatar">
                        <img src="@(!string.IsNullOrEmpty(message.User.ProfilePicture) ? message.User.ProfilePicture : Url.Content("~/images/MissingNo.png"))" alt="@message.User.FirstName @message.User.LastName" class="w-100 h-100 rounded-circle">
                    </a>
                    <div class="d-inline-block p-2 rounded position-relative @(message.UserId == ViewBag.CurrentUserId ? "bg-primary text-white" : "bg-white border")">
                        <div class="small text-@(message.UserId == ViewBag.CurrentUserId ? "light" : "muted")">
                            <a href="@Url.Action("Show", "Users", new { id = message.UserId })" class="@(message.UserId == ViewBag.CurrentUserId ? "self-" : "")user-name text-decoration-none text-@(message.UserId == ViewBag.CurrentUserId ? "light" : "muted")">
                                @message.User.FirstName @message.User.LastName
                            </a> • @message.Timestamp.ToString("dd/MM/yyyy HH:mm")
                            @if (message.UserId == ViewBag.CurrentUserId || User.IsInRole("Admin"))
                            {
                                <button class="btn btn-sm text-@(message.UserId == ViewBag.CurrentUserId ? "light" : "muted") message-actions ms-2" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><button class="dropdown-item edit-button" data-message-id="@message.Id">Edit</button></li>
                                    <li><button class="dropdown-item text-danger delete-button" data-message-id="@message.Id">Delete</button></li>
                                </ul>
                            }
                        </div>
                        <div id="messageContent">@message.Content</div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Message Input -->
    <div class="p-3 border-top bg-white">
        <div class="input-group">
            <input type="text" id="messageInput" class="form-control" placeholder="Type a message...">
            <button id="sendButton" type="button" class="btn btn-primary">
                <i id="sendButtonIcon" class="bi bi-send"></i>
            </button>
        </div>
    </div>
</div>

<script>
    var isAdmin = @Json.Serialize(User.IsInRole("Admin"));
    var currentUserId = @Json.Serialize(ViewBag.CurrentUserId);
    var groupId = @Json.Serialize(Model.Id);
    var editingMessageId = null;
    $(function () {
        $('#messageInput').keypress(function(e) {
            if(e.which == 13) {
                $('#sendButton').click();
            }
        });

        $('#messagesList').on('click', '.edit-button', function (e) {
            e.stopPropagation();
            var messageId = $(this).data('message-id');
            console.log('Edit Message ID:', messageId);

            if (editingMessageId === messageId) {
                editingMessageId = null;
                $('#messageInput').val('').focus();
                $(this).text('Edit');
                $('#sendButtonIcon').removeClass('bi-pencil').addClass('bi-send');
                return;
            }

            // Reset the text of any other edit buttons
            $('.edit-button').text('Edit');

            editingMessageId = messageId;
            $(this).text('Stop edit');
            $('#sendButtonIcon').removeClass('bi-send').addClass('bi-pencil');

            var messageContent = $(this).closest('.mb-3').find('#messageContent').text();
            $('#messageInput').val(messageContent).focus();
        });

        $('#messagesList').on('click', '.delete-button', function (e) {
            e.stopPropagation();
            var messageId = $(this).data('message-id');
            console.log('Delete Message ID:', messageId);

            connection.invoke("DeleteMessage", messageId).catch(function (err) {
                console.error(err.toString());
            });
        });

        $('#sendButton').click(function () {
            if (editingMessageId) {
                console.log('Editing' + editingMessageId);
                const chatMessage = {
                    id: editingMessageId,
                    userId: currentUserId,
                    groupId: groupId,
                    content: $('#messageInput').val(),
                    timestamp: new Date().toISOString()
                };
                connection.invoke("EditMessage", chatMessage).catch(function (err) {
                    console.error(err.toString());
                });

                editingMessageId = null;
                $('#messageInput').val('').focus();
                $('#sendButtonIcon').removeClass('bi-pencil').addClass('bi-send');
                $('.edit-button[data-message-id="' + chatMessage.id + '"]').text('Edit');
                return;
            }

            const chatMessage = {
                userId: currentUserId,
                groupId: groupId,
                content: $('#messageInput').val(),
                timestamp: new Date().toISOString()
            };

            connection.invoke("SendMessageToUsers", chatMessage).catch(function (err) {
                console.error(err.toString());
            });

            $('#messageInput').val('').focus();
        });
    });
</script>
